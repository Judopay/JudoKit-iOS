version: 2.1

executors:
  macos:
    macos:
      xcode: 13.4.1

jobs:
  carthage_update_sdk:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-carthage-{{ checksum "Cartfile.resolved" }}
            - judokit-ios-carthagekit-{{ checksum "Cartfile.resolved" }}
            - judokit-ios-carthagecache-{{ checksum "Cartfile.resolved" }}
      - run:
          name: Carthage Update
          command: carthage bootstrap
      - save_cache:
          key: judokit-ios-carthage-{{ checksum "Cartfile.resolved" }}
          paths:
            - Carthage
      - save_cache:
          key: judokit-ios-carthagekit-{{ checksum "Cartfile.resolved" }}
          paths:
            - ~/Library/Caches/org.carthage.CarthageKit
      - save_cache:
          key: judokit-ios-carthagecache-{{ checksum "Cartfile.resolved" }}
          paths:
            - ~/Library/Caches/carthage
  bundle_install:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-{{ checksum "Gemfile" }}
      - run:
          name: Bundle Install
          command: bundle install
      - save_cache:
          key: judokit-ios-{{ checksum "Gemfile" }}
          paths: ~/.bundle/cache
  carthage_update_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-carthage-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
            - judokit-sample-carthagekit-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
            - judokit-sample-carthagecache-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
      - run:
          name: Carthage Update Sample App
          working_directory: Examples/CarthageExampleApp
          command: carthage update --use-xcframeworks
      - save_cache:
          key: judokit-sample-carthage-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
          paths:
            - Examples/CarthageExampleApp/Carthage
      - save_cache:
          key: judokit-sample-carthagekit-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
          paths:
            - ~/Library/Caches/org.carthage.CarthageKit
      - save_cache:
          key: judokit-sample-carthagecache-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
          paths:
            - ~/Library/Caches/carthage
  pod_install_objc_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-objc-cocoapods-{{ checksum "Examples/ObjectiveCExampleApp/Podfile.lock" }}
      - run:
          name: Pod Install ObjC Sample App
          working_directory: Examples/ObjectiveCExampleApp
          command: pod install --repo-update
      - save_cache:
          key: judokit-sample-objc-cocoapods-{{ checksum "Examples/ObjectiveCExampleApp/Podfile.lock" }}
          paths:
            - Examples/ObjectiveCExampleApp/Pods
            - Examples/ObjectiveCExampleApp/Podfile.lock
  pod_install_swift_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-swift-cocoapods-{{ checksum "Examples/SwiftExampleApp/Podfile.lock" }}
      - run:
          name: Pod Install Swift Sample App
          working_directory: Examples/SwiftExampleApp
          command: pod install --repo-update
      - save_cache:
          key: judokit-sample-swift-cocoapods-{{ checksum "Examples/SwiftExampleApp/Podfile.lock" }}
          paths:
            - Examples/SwiftExampleApp/Pods
            - Examples/SwiftExampleApp/Podfile.lock
  build_sdk:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-carthage-{{ checksum "Cartfile.resolved" }}
      - run:
          name: Build SDK
          command: |
            xcodebuild clean build \
              -project JudoKit_iOS.xcodeproj \
              -scheme JudoKit_iOS \
              -configuration Release \
              -sdk iphonesimulator \
              -derivedDataPath DerivedData
      - persist_to_workspace:
          root: .
          paths:
            - DerivedData
  build_carthage_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-carthage-{{ checksum "Examples/CarthageExampleApp/Cartfile.resolved" }}
      - run:
          name: Build Carthage Sample
          command: |
            xcodebuild clean build \
              -project Examples/CarthageExampleApp/CarthageExampleApp.xcodeproj \
              -scheme CarthageExampleApp \
              -configuration Release \
              -sdk iphonesimulator \
              -derivedDataPath Examples/CarthageExampleApp/DerivedData
      - persist_to_workspace:
          root: .
          paths:
            - Examples/CarthageExampleApp/DerivedData
  build_objc_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-objc-cocoapods-{{ checksum "Examples/ObjectiveCExampleApp/Podfile.lock" }}
      - run:
          name: Build ObjC Sample
          working_directory: Examples/ObjectiveCExampleApp
          command: |
            xcodebuild archive \
              -workspace ObjectiveCExampleApp.xcworkspace \
              -scheme ObjectiveCExampleApp \
              -destination "generic/platform=iOS" \
              -configuration Release \
              -archivePath build/ObjectiveCExampleApp
            xcodebuild -exportArchive \
              -archivePath build/ObjectiveCExampleApp.xcarchive \
              -exportPath /build \
              -exportOptionsPlist ExportOptions.plist
      - persist_to_workspace:
          root: .
          paths:
            - Examples/ObjectiveCExampleApp/build/ObjectiveCExampleApp
  build_swift_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-swift-cocoapods-{{ checksum "Examples/SwiftExampleApp/Podfile.lock" }}
      - run:
          name: Build Swift Sample
          command: |
            xcodebuild clean build \
              -project Examples/SwiftExampleApp/SwiftExampleApp.xcodeproj \
              -scheme SwiftExampleApp \
              -configuration Release \
              -sdk iphonesimulator \
              -derivedDataPath Examples/SwiftExampleApp/DerivedData
      - persist_to_workspace:
          root: .
          paths:
            - Examples/SwiftExampleApp/DerivedData
  build_spm_sample:
    executor: macos
    steps:
      - checkout
      - run:
          name: Build SPM Sample
          command: |
            xcodebuild clean build \
              -project Examples/SPMExampleApp/SPMExampleApp.xcodeproj \
              -scheme SPMExampleApp \
              -configuration Release \
              -sdk iphonesimulator \
              -derivedDataPath Examples/SPMExampleApp/DerivedData
      - persist_to_workspace:
          root: .
          paths:
            - Examples/SPMExampleApp/DerivedData
  unit_test_sdk:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-ios-carthage-{{ checksum "Cartfile.resolved" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Sonar Build Wrapper
          command: |
            curl -o /var/tmp/build-wrapper-macosx-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip
            unzip /var/tmp/build-wrapper-macosx-x86.zip -d /var/tmp
            sudo mkdir -p /opt/build-wrapper-macosx/bin
            sudo mv /var/tmp/build-wrapper-macosx-x86/* /opt/build-wrapper-macosx/bin/
            rm -rf /var/tmp/build-wrapper-macosx-x86
            ln -s /opt/build-wrapper-macosx/bin/build-wrapper-macosx-x86 /usr/local/bin/build-wrapper-macosx-x86
      - run:
          name: Run SDK Unit Tests
          command: |
            build-wrapper-macosx-x86 --out-dir build-wrapper-output xcodebuild \
              -project JudoKit_iOS.xcodeproj \
              -scheme JudoKit_iOS \
              -destination 'platform=iOS Simulator,name=iPhone 13' \
              -enableCodeCoverage YES \
              -derivedDataPath DerivedData \
              test
      - run:
          name: Covert XCode Coverage Reports to SonarQube Format
          command: |
            curl -o xccov-to-sonarqube-generic.sh https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh
            chmod +x xccov-to-sonarqube-generic.sh
            ./xccov-to-sonarqube-generic.sh DerivedData/Logs/Test/*.xcresult/ > build-wrapper-output/sonarqube-generic-coverage.xml
            rm xccov-to-sonarqube-generic.sh
      - persist_to_workspace:
          root: .
          paths:
            - DerivedData
            - build-wrapper-output
  unit_test_objc_sample:
    executor: macos
    steps:
      - checkout
      - restore_cache:
          keys:
            - judokit-sample-objc-{{ checksum "Examples/ObjectiveCExampleApp/Podfile.lock" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Sonar Build Wrapper
          command: |
            curl -o /var/tmp/build-wrapper-macosx-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip
            unzip /var/tmp/build-wrapper-macosx-x86.zip -d /var/tmp
            sudo mkdir -p /opt/build-wrapper-macosx/bin
            sudo mv /var/tmp/build-wrapper-macosx-x86/* /opt/build-wrapper-macosx/bin/
            rm -rf /var/tmp/build-wrapper-macosx-x86
            ln -s /opt/build-wrapper-macosx/bin/build-wrapper-macosx-x86 /usr/local/bin/build-wrapper-macosx-x86
      - run:
          name: Run Unit Tests
          command: |
            build-wrapper-macosx-x86 --out-dir Examples/ObjectiveCExampleApp/build-wrapper-output xcodebuild \
              -project Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj \
              -scheme ObjectiveCExampleApp \
              -destination 'platform=iOS Simulator,name=iPhone 13' \
              -derivedDataPath Examples/ObjectiveCExampleApp/DerivedData \
              test
      - run:
          name: Covert XCode Coverage Reports to SonarQube Format
          command: |
            curl -o xccov-to-sonarqube-generic.sh https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh
            chmod +x xccov-to-sonarqube-generic.sh
            ./xccov-to-sonarqube-generic.sh Examples/ObjectiveCExampleApp/DerivedData/Logs/Test/*.xcresult/ > Examples/ObjectiveCExampleApp/build-wrapper-output/sonarqube-generic-coverage.xml
            rm xccov-to-sonarqube-generic.sh
      - persist_to_workspace:
          root: .
          paths:
            - Examples/ObjectiveCExampleApp/DerivedData
            - Examples/ObjectiveCExampleApp/build-wrapper-output
  validate_podspec:
    executor: macos
    steps:
      - checkout
      - run:
          name: Validate PodSpec
          command: pod lib lint --no-subspecs --allow-warnings
  sonar_scan:
    executor: macos
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Sonar Scanner
          command: |
            export SONARSCANNER_VERSION=4.3.0.2102
            curl -o sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONARSCANNER_VERSION}-macosx.zip
            sudo unzip -q sonarscanner.zip -d /opt
            rm sonarscanner.zip
            ln -s /opt/sonar-scanner-${SONARSCANNER_VERSION}-macosx/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Run Sonar Scan
          command: |
            export REPO_OWNER=Judopay
            export REPO_NAME=$(basename `git config --get remote.origin.url` .git)
            export GENERIC_COVERAGE_REPORTS=$(find `pwd -P` -name sonarqube-generic-coverage.xml)
            export OBJC_BUILD_WRAPPER_OUTPUT_DIR=$(dirname $(find `pwd -P` -name build-wrapper-dump.json))
            export BRANCH_NAME=$(git branch | grep \* | cut -d ' ' -f2)
            PARAMS=(-Dsonar.host.url=https://sonarcloud.io)
            PARAMS+=(-Dsonar.login=$SONARCLOUD_TOKEN)
            PARAMS+=(-Dsonar.organization=judopay)
            PARAMS+=(-Dsonar.projectKey=${REPO_OWNER}_${REPO_NAME})
            PARAMS+=(-Dsonar.projectName=${REPO_NAME})
            PARAMS+=(-Dsonar.sources=.)
            PARAMS+=(-Dsonar.coverageReportPaths=${GENERIC_COVERAGE_REPORTS})
            PARAMS+=(-Dsonar.cfamily.build-wrapper-output=${OBJC_BUILD_WRAPPER_OUTPUT_DIR})
            PARAMS+=(-Dsonar.cfamily.cache.enabled=false)
            PARAMS+=(-Dproject.settings=.sonarscan)
            if [ "$BRANCH_NAME" == "master" ]; then
              echo "On master branch. Running default scan."
            elif PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls | jq ".[] | select(.head.ref == \"$BRANCH_NAME\")"); then
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
              PR_TARGET=$(echo "$PR_INFO" | jq -r '.base.ref')
              if [ "$PR_NUMBER" != "" ]; then
                echo "Pull request $PR_NUMBER found. Running a pull request scan."
                PARAMS+=(-Dsonar.pullrequest.github.repository=${REPO_OWNER}/${REPO_NAME})
                PARAMS+=(-Dsonar.pullrequest.base=$PR_TARGET)
                PARAMS+=(-Dsonar.pullrequest.key=$PR_NUMBER)
                PARAMS+=(-Dsonar.pullrequest.branch=$BRANCH_NAME)
                PARAMS+=(-Dsonar.pullrequest.provider=GitHub)
              fi
            else
              echo "Couldnt find pull request. Running short-lived branch scan."
              PARAMS+=(-Dsonar.branch.name=$BRANCH_NAME)
              PARAMS+=(-Dsonar.branch.target=master)
            fi
            sonar-scanner "${PARAMS[@]}"
  release_sample:
    executor: macos
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Firebase CLI
          command: curl -sL https://firebase.tools | bash
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Create Release Notes
          command: echo "$(git log -1 --pretty=format:"%b")" > ./notes.txt
      - run:
          name: Distribute Sample App
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            firebase appdistribution:distribute \
              Examples/ObjectiveCExampleApp/build/ObjectiveCExampleApp/ObjectiveCExampleApp.ipa \
              --app "$IOS_FIREBASE_APP_ID" \
              --groups "default-testers" \
              --release-notes-file ./notes.txt
  release_sdk:
    executor: macos
    steps:
      - checkout
      - run:
          name: Release SDK to CocoaPods
          command: pod trunk push JudoKit-iOS.podspec --allow-warnings
  report_to_jira:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - checkout
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

workflows:
  version: 2
  build:
    jobs:
      - carthage_update_sdk
      - bundle_install
      - carthage_update_sample
      - pod_install_objc_sample
      - pod_install_swift_sample
      - build_sdk:
          requires:
            - carthage_update_sdk
      - unit_test_sdk:
          requires:
            - build_sdk
      - validate_podspec
      - sonar_scan:
          context: shared-secrets
          requires:
            - unit_test_sdk
      - build_objc_sample:
          requires:
            - build_sdk
      - build_carthage_sample:
          requires:
            - build_sdk
      - build_swift_sample:
          requires:
            - build_sdk
      - build_spm_sample:
          requires:
            - build_sdk
      - release_sample:
          context: shared-secrets
          requires:
            - build_objc_sample
            - validate_podspec
          filters:
            branches:
              only:
                - master
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - release_sample
      - release_sdk:
          context: shared-secrets
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v((\d)+\.){1,2}(\d+)/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
