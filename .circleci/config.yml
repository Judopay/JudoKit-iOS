version: 2.1

executors:
  macos:
    macos:
      xcode: 15.0.0

orbs:
  slack: circleci/slack@4.12.5
  ruby: circleci/ruby@2.1.0
  saucectl: saucelabs/saucectl-run@3.0.0

commands:
  notify_slack_error:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :aapl: iOS E2E mobile tests but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/$GOOGLE_PROJECT_ID/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/$CIRCLE_PROJECT_REPONAME/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :aapl: iOS E2E mobile tests, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/$GOOGLE_PROJECT_ID/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/$CIRCLE_PROJECT_REPONAME/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_pass_weekly:
    steps:
      - slack/notify:
          event: pass
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI has just *successfully* ran the :aapl: iOS E2E mobile tests for backward compatibility, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/$GOOGLE_PROJECT_ID/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/$CIRCLE_PROJECT_REPONAME/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

  notify_slack_error_weekly:
    steps:
      - slack/notify:
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "CircleCI ran the :aapl: iOS E2E mobile tests for backward compatibility but they *failed*, here are the results: \n *<$CIRCLE_BUILD_URL | :circleci: Open build>* \n *<https://console.firebase.google.com/u/0/project/$GOOGLE_PROJECT_ID/testlab/histories/ | :firebase: Firebase results>*"
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project:*\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Commit:* \n <https://github.com/Judopay/$CIRCLE_PROJECT_REPONAME/commit/${CIRCLE_SHA1} | ${CIRCLE_SHA1:0:7}>"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author:*\n$CIRCLE_USERNAME"
                    }
                  ]
                }
              ]
            }

parameters:
  weekly:
    type: boolean
    default: false

jobs:
  checkout_project:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - checkout
      - ruby/install-deps
      - persist_to_workspace:
          root: .
          paths: .
  lint_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
         name: Install clang-format
         command: brew install clang-format
      - run:
          name: Lint JudoKit-iOS
          command: bundle exec fastlane lint
  build_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - judokit-ios-carthage-{{ checksum "Cartfile.resolved" }}
      - run:
          name: Build SDK
          command: bundle exec fastlane build
      - save_cache:
          key: judokit-ios-carthage-{{ checksum "Cartfile.resolved" }}
          paths:
            - ./Carthage
            - ~/Library/Caches/org.carthage.CarthageKit
            - ~/Library/Caches/carthage
      - persist_to_workspace:
          root: .
          paths:
            - ./DerivedData
            - ./Carthage
  unit_test_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Sonar Build Wrapper
          command: |
            curl -o /var/tmp/build-wrapper-macosx-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-macosx-x86.zip
            unzip /var/tmp/build-wrapper-macosx-x86.zip -d /var/tmp
            sudo mkdir -p /opt/build-wrapper-macosx/bin
            sudo mv /var/tmp/build-wrapper-macosx-x86/* /opt/build-wrapper-macosx/bin/
            rm -rf /var/tmp/build-wrapper-macosx-x86
            ln -s /opt/build-wrapper-macosx/bin/build-wrapper-macosx-x86 /usr/local/bin/build-wrapper-macosx-x86
      - run:
          name: Run SDK Unit Tests
          command: |
            build-wrapper-macosx-x86 --out-dir build-wrapper-output xcodebuild clean test \
              -project JudoKit_iOS.xcodeproj \
              -scheme JudoKit_iOS \
              -destination "platform=iOS Simulator,name=iPhone 15" \
              -enableCodeCoverage YES \
              -derivedDataPath DerivedData
      - run:
          name: Covert XCode Coverage Reports to SonarQube Format
          command: |
            curl -o xccov-to-sonarqube-generic.sh https://raw.githubusercontent.com/SonarSource/sonar-scanning-examples/master/swift-coverage/swift-coverage-example/xccov-to-sonarqube-generic.sh
            chmod +x xccov-to-sonarqube-generic.sh
            ./xccov-to-sonarqube-generic.sh DerivedData/Logs/Test/*.xcresult/ > build-wrapper-output/sonarqube-generic-coverage.xml
            rm xccov-to-sonarqube-generic.sh
      - persist_to_workspace:
          root: .
          paths:
            - ./DerivedData
            - ./build-wrapper-output
  sonar_scan:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Sonar Scanner
          command: |
            export SONARSCANNER_VERSION=5.0.1.3006
            curl -o sonarscanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${SONARSCANNER_VERSION}-macosx.zip
            sudo unzip -q sonarscanner.zip -d /opt
            rm sonarscanner.zip
            ln -s /opt/sonar-scanner-${SONARSCANNER_VERSION}-macosx/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Run Sonar Scan
          command: |
            export REPO_OWNER=Judopay
            export REPO_NAME=$(basename `git config --get remote.origin.url` .git)
            export GENERIC_COVERAGE_REPORTS=$(find `pwd -P` -name sonarqube-generic-coverage.xml)
            export OBJC_BUILD_WRAPPER_OUTPUT_DIR=$(dirname $(find `pwd -P` -name build-wrapper-dump.json))
            export BRANCH_NAME=$(git branch | grep \* | cut -d ' ' -f2)
            PARAMS=(-Dsonar.host.url=https://sonarcloud.io)
            PARAMS+=(-Dsonar.login=$SONARCLOUD_TOKEN)
            PARAMS+=(-Dsonar.organization=judopay)
            PARAMS+=(-Dsonar.projectKey=${REPO_OWNER}_${REPO_NAME})
            PARAMS+=(-Dsonar.projectName=${REPO_NAME})
            PARAMS+=(-Dsonar.sources=.)
            PARAMS+=(-Dsonar.coverageReportPaths=${GENERIC_COVERAGE_REPORTS})
            PARAMS+=(-Dsonar.cfamily.build-wrapper-output=${OBJC_BUILD_WRAPPER_OUTPUT_DIR})
            PARAMS+=(-Dsonar.cfamily.cache.enabled=false)
            PARAMS+=(-Dproject.settings=.sonarscan)
            if [ "$BRANCH_NAME" == "master" ]; then
              echo "On master branch. Running default scan."
            elif PR_INFO=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/pulls | jq ".[] | select(.head.ref == \"$BRANCH_NAME\")"); then
              PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')
              PR_TARGET=$(echo "$PR_INFO" | jq -r '.base.ref')
              if [ "$PR_NUMBER" != "" ]; then
                echo "Pull request $PR_NUMBER found. Running a pull request scan."
                PARAMS+=(-Dsonar.pullrequest.github.repository=${REPO_OWNER}/${REPO_NAME})
                PARAMS+=(-Dsonar.pullrequest.base=$PR_TARGET)
                PARAMS+=(-Dsonar.pullrequest.key=$PR_NUMBER)
                PARAMS+=(-Dsonar.pullrequest.branch=$BRANCH_NAME)
                PARAMS+=(-Dsonar.pullrequest.provider=GitHub)
              fi
            else
              echo "Couldnt find pull request. Running short-lived branch scan."
              PARAMS+=(-Dsonar.branch.name=$BRANCH_NAME)
              PARAMS+=(-Dsonar.branch.target=master)
            fi
            sonar-scanner "${PARAMS[@]}"
  build_example_apps:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build example apps / test integration with SDK
          command: bundle exec fastlane build_sample_app flavors:obj-c,swift,carthage,spm build_for_distribution:false
  build_instrumented_tests_package:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Build ObjC Sample for UI Tests using Fastlane
          command: bundle exec fastlane package_instrumented_tests
      - persist_to_workspace:
          root: .
          paths:
            - ./DerivedData
            - ./Output/ObjectiveCExampleAppUITests.zip
  instrumented_tests_sample:
    executor: macos
    environment:
      APP: JudoKit.app
      TEST_APP: ObjectiveCExampleAppUITests-Runner.app
    steps:
      - attach_workspace:
          at: ~/project
      - saucectl/saucectl-run
      # - notify_slack_error
      # - notify_slack_pass
  instrumented_tests_sample_multiple:
    executor: macos
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Google Cloud CLI
          command: |
            brew install google-cloud-sdk --cask
      - run:
          name: Store Google Service Account
          command: echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Authorize gcloud and set config defaults
          command: |
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Test with Firebase Test Lab
          no_output_timeout: 30m
          command: >
            gcloud firebase test ios run \
              --test ./Output/ObjectiveCExampleAppUITests.zip \
              --xcode-version 15.0 \
              --device model=iphone13pro,version=15.2 \
              --device model=iphone11pro,version=14.7 \
              --results-bucket $FIREBASE_TEST_RESULTS_BUCKET
      - notify_slack_error_weekly
      - notify_slack_pass_weekly
  run_instrumented_tests:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install reporter
          command: |
            brew install xctesthtmlreport
      - run:
          name: Execute ObjC Sample App UI Tests
          working_directory: ./Examples/ObjectiveCExampleApp
          command: |
            xcodebuild clean test \
              -workspace ObjectiveCExampleApp.xcworkspace \
              -resultBundlePath TestResults \
              -scheme ObjectiveCExampleAppUITests \
              -destination 'platform=iOS Simulator,name=iPhone 14 Pro,OS=16.2' \
              -derivedDataPath ./DerivedData \
              -allowProvisioningUpdates \
              TEST_API_JUDO_ID=$TEST_JUDO_ID \
              TEST_API_TOKEN=$TEST_JUDO_API_TOKEN \
              TEST_API_SECRET=$TEST_JUDO_API_SECRET
      - run:
          name: Generate test report
          working_directory: ./Examples/ObjectiveCExampleApp
          command: |
            xchtmlreport TestResults.xcresult
      - store_artifacts:
          path: ./Examples/ObjectiveCExampleApp/TestResults.xcresult
      - store_artifacts:
          path: ./Examples/ObjectiveCExampleApp/index.html
  release_sample:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Store Google Service Account
          command: |
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
      - run:
          name: Distribute Sample App
          command: |
            export GOOGLE_APPLICATION_CREDENTIALS=${HOME}/gcloud-service-key.json
            bundle exec fastlane distribute_sample_app flavors:obj-c,swift,carthage,spm
  release_sdk:
    executor: macos
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Release SDK to CocoaPods
          command: bundle exec pod trunk push JudoKit-iOS.podspec --allow-warnings
  report_to_jira:
    docker:
      - image: europe-docker.pkg.dev/opnf-management/docker/deployer:latest
        auth:
          username: _json_key
          password: $GCLOUD_SERVICE_KEY
    parameters:
      environment:
        type: string
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Report Deployment to Jira
          environment:
            ENVIRONMENT: << parameters.environment >>
          command: /resources/scripts/report-status-to-jira.sh

workflows:  
  build:
    when:
      not: << pipeline.parameters.weekly >>
    jobs:
      - checkout_project:
          filters:
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      # - lint_sdk:
      #     requires:
      #       - checkout_project
      # - build_sdk:
      #     requires:
      #       - lint_sdk
      # - unit_test_sdk:
      #     requires:
      #       - build_sdk
      # - sonar_scan:
      #     context: shared-secrets
      #     requires:
      #       - unit_test_sdk
      # - build_example_apps:
      #     requires:
      #       - unit_test_sdk
      - build_instrumented_tests_package:
          requires:
            - unit_test_sdk
      - run_instrumented_tests:
          context: shared-secrets
          requires:
            - checkout_project
          filters:
            branches:
              only:
                - master
      - instrumented_tests_sample:
          context: shared-secrets
          requires:
            - build_instrumented_tests_package
          filters:
            branches:
              only:
                - CT-2863-run-on-sauce-labs
      - release_sample:
          context: shared-secrets
          requires:
            - checkout_project
          filters:
            branches:
              only:
                - master
      - report_to_jira:
          context: shared-secrets
          environment: staging
          requires:
            - release_sample
      - release_sdk:
          context: shared-secrets
          requires:
            - checkout_project
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v[0-9]+(\.[0-9]+)*$/
      - report_to_jira:
          context: shared-secrets
          environment: prod
          requires:
            - release_sdk
  e2e-backward-compat-weekly:
      when: << pipeline.parameters.weekly >>
      jobs:
        - checkout_project
        - build_instrumented_tests_package:
            requires:
              - checkout_project
        - instrumented_tests_sample_multiple:
            context: shared-secrets
            requires:
              - build_instrumented_tests_package
            filters:
              branches:
                only:
                  - master
