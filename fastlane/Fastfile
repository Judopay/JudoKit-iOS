require './helpers'

default_platform(:ios)

@compilation_database_path = ENV["XCODE_COMPILATION_DB_PATH"] || "#{File.expand_path('..')}/build/compilation_database"
@derived_data_path = ENV["XCODE_DERIVED_DATA_PATH"] || "#{File.expand_path('..')}/DerivedData"
@environments = ['staging', 'production']
@fl_output_dir = ENV['FL_OUTPUT_DIR'] || "#{File.expand_path('..')}/Output"
@project_root_path = File.expand_path('..')
sample_apps_dir = "#{File.expand_path('..')}/Examples"
@sample_apps = [
  SampleApp.new(
    firebase_app_id: {
      production: '1:34238832242:ios:d7db21b04007e9ee63eceb',
      staging: '1:34238832242:ios:62eb2547e6cd6a2663eceb'
    },
    flavor: 'obj-c',
    path: "#{sample_apps_dir}/ObjectiveCExampleApp",
    smoke_test_list: [
      "ObjectiveCExampleAppUITests/CardPaymentUITests/testSuccessfulPaymentWithBillingDetails",
      "ObjectiveCExampleAppUITests/CardPaymentUITests/testSuccessfulTokenPayment",
      "ObjectiveCExampleAppUITests/CardPaymentUITests/testSuccessfulPreauthMethodsCardPayment"
    ],
  ),
  SampleApp.new(
    firebase_app_id: {
      production: '1:34238832242:ios:7bbdd8e61adb48e863eceb'
    },
    flavor: 'swift',
    path: "#{sample_apps_dir}/SwiftExampleApp",
  ),
  SampleApp.new(
    bootstrap_script: 'carthage_example_carthage_bootstrap.sh',
    firebase_app_id: {
      production: '1:34238832242:ios:eafceec3517c076463eceb'
    },
    flavor: 'carthage',
    path: "#{sample_apps_dir}/CarthageExampleApp",
  ),
  SampleApp.new(
    firebase_app_id: {
      production: '1:34238832242:ios:f07ce32928073fa463eceb',
    },
    flavor: 'spm',
    path: "#{sample_apps_dir}/SPMExampleApp",
  )
]
@scripts_dir = "#{File.expand_path('..')}/scripts"
@ui_tests_xcargs = "-allowProvisioningUpdates "\
                   "TEST_API_JUDO_ID='#{ENV['JUDO_API_ID']}' "\
                   "TEST_API_TOKEN='#{ENV['JUDO_API_TOKEN']}' "\
                   "TEST_API_SECRET='#{ENV['JUDO_API_SECRET']}' "\
                   "RSA_PUBLIC_KEY='#{ENV['RSA_PUBLIC_KEY']}' "\
                   "RAVELIN_MOCK_SERVER_URL='#{ENV['RAVELIN_MOCK_SERVER_URL']}'"


platform :ios do
  before_all do
    setup_ci
  end

  desc "Lint SDK"
  lane :lint do
    Dir.chdir('..') do
      sh('./scripts/judo_kit_lint.sh')
    end
  end

  desc "Build SDK"
  lane :build do |options|
    lint
    carthage
    
    FileUtils.mkdir_p(@compilation_database_path)
    build_app(
      derived_data_path: @derived_data_path,
      skip_codesigning: true,
      skip_package_ipa: true,
      skip_package_dependencies_resolution: true,
      xcargs: "OTHER_CFLAGS='$(inherited) -gen-cdb-fragment-path #{@compilation_database_path}'"
    )
  end

  desc "Run SDK tests"
  lane :test do
    carthage
    run_tests(
      clean: false,
      code_coverage: true,
      derived_data_path: @derived_data_path,
      ensure_devices_found: true
    )
  end

  desc "Publish SDK"
  lane :publish do
    pod_push(
      allow_warnings: true,
      path: "#{@project_root_path}/JudoKit-iOS.podspec",
      use_bundle_exec: true
    )
  end

  desc "Run full PR check pipeline"
  lane :pr_check do
    lint
    build
    test
    build_sample_apps
  end

  desc "Build Sample Apps"
  lane :build_sample_apps do |options|
    app_store_connect_api_key

    @sample_apps.select{ |app|
      !options.key?(:flavors) || options[:flavors].include?(app.flavor)
    }.each do |app|
      @environments.select{ |env|
        !options.key?(:environment) || options[:environment] == env
      }.each do |env|
        build_sample_app({app: app, environment: env}) if !app.firebase_app_id(environment: env).nil?
      end
    end
  end

  desc "Build Sample App"
  private_lane :build_sample_app do |options|
    cocoapods(
      podfile: options[:app].podfile
    ) if !options[:app].podfile.nil? && File.file?(options[:app].podfile)

    sh("#{@scripts_dir}/#{options[:app].bootstrap_script}") if !options[:app].bootstrap_script.nil?

    inject_staging_environment(
      app: options[:app],
      sdk_root_path: @project_root_path
    ) if options[:environment] == 'staging'

    bump_build_number(
      app: options[:app],
      environment: options[:environment]
    )

    sync_code_signing({
      readonly: true,
      type: "development",
      app_identifier: get_product_bundle_id(
        project_filepath: options[:app].project,
        scheme: options[:app].scheme
      )
    })

    # Build sample app
    build_app({
      configuration: 'Debug',
      derived_data_path: @derived_data_path,
      export_method: 'development',
      output_name: "#{options[:app].scheme}-#{options[:environment]}.ipa",
      project: !options[:app].workspace.nil? ? nil : options[:app].project,
      scheme: options[:app].scheme,
      workspace: options[:app].workspace,
    })

    revert_staging_environment(
      app: options[:app],
      sdk_root_path: @project_root_path
    ) if options[:environment] == 'staging'

    build_instrumented_tests_packages({
      app: options[:app]
    }) if !options[:app].ui_test_scheme.nil? && options[:environment] == 'production'
  end

  desc "Package Instrumented Tests for a Sample App"
  private_lane :build_instrumented_tests_packages do |options|
    sync_code_signing({
      readonly: true,
      type: "development",
      app_identifier: [
        "#{get_product_bundle_id(
          project_filepath: options[:app].project,
          scheme: options[:app].ui_test_scheme
        )}.*"
      ]
    })

    build_options = {
      build_for_testing: true,
      clean: false,
      derived_data_path: @derived_data_path,
      destination: "generic/platform=iOS",
      include_simulator_logs: false,
      project: !options[:app].workspace.nil? ? nil : options[:app].project,
      scheme: options[:app].ui_test_scheme,
      sdk: "iphoneos",
      testplan: options[:app].ui_test_plan,
      workspace: options[:app].workspace,
      xcargs: @ui_tests_xcargs,
      xcodebuild_command: "env NSUnbufferedIO=YES xcodebuild",
    }

    # Build the instrumented tests - does not actually run them due to "build_for_testing: true"
    run_tests(build_options)

    package_instrumented_tests(
      app: options[:app],
      input_dir: "#{@derived_data_path}/Build/Products",
      output_dir: @fl_output_dir,
      output_file: "#{options[:app].ui_test_scheme}-all.zip",
    )

    # If there is a smoke test list, repeat the build to create a package
    # which will only run the subset of tests
    if !options[:app].smoke_test_list.nil?
      run_tests(
        {
          only_testing: options[:app].smoke_test_list,
        }.merge(build_options)
      )

      package_instrumented_tests(
        app: options[:app],
        input_dir: "#{@derived_data_path}/Build/Products",
        output_dir: @fl_output_dir,
        output_file: "#{options[:app].ui_test_scheme}-smoke.zip"
      )
    end
  end

  # Note: Unit tests and instrumented tests on simulators don't work for now so they are commented out.
  # desc "Test Sample Apps"
  # lane :test_sample_apps do |options|
  #   @sample_apps.select{ |app|
  #     !options.key?(:flavors) || options[:flavors].include?(app.flavor)
  #   }.each do |app|
  #     test_sample_app({app: app})
  #   end
  # end

  # desc "Test Sample App"
  # private_lane :test_sample_app do |options|
  #   if options[:app].unit_test_scheme.nil?
  #     UI.important("No unit test scheme found for #{options[:app].scheme}. Skipping unit tests.")
  #     next
  #   end

  #   run_tests(
  #     derived_data_path: @derived_data_path,
  #     ensure_devices_found: true,
  #     project: !options[:app].workspace.nil? ? nil : options[:app].project,
  #     scheme: options[:app].unit_test_scheme,
  #     skip_build: true,
  #     workspace: options[:app].workspace,
  #   )
  # end

  # desc "Run instrumented tests for sample apps on simulators"
  # lane :test_sample_apps_simulator do |options|
  #   @sample_apps.select{ |app|
  #     !options.key?(:flavors) || options[:flavors].include?(app.flavor)
  #   }.each do |app|
  #     test_sample_app_simulator({app: app})
  #   end
  # end

  # desc "Run instrumented tests for a sample app on a simulator"
  # private_lane :test_sample_app_simulator do |options|
  #   if options[:app].ui_test_scheme.nil?
  #     UI.important("No UI test scheme found for #{options[:app].scheme}. Skipping instrumented tests.")
  #     next
  #   end

  #   run_tests({
  #     derived_data_path: @derived_data_path,
  #     destination: "generic/platform=iOS",
  #     include_simulator_logs: false,
  #     project: !options[:app].workspace.nil? ? nil : options[:app].project,
  #     scheme: options[:app].ui_test_scheme,
  #     sdk: "iphoneos",
  #     testplan: options[:app].ui_test_plan,
  #     workspace: options[:app].workspace,
  #     xcargs: @ui_tests_xcargs,
  #     xcodebuild_command: "env NSUnbufferedIO=YES xcodebuild",
  #   })
  # end

  desc "Run instrumented tests for sample apps on Firebase"
  lane :test_sample_apps_firebase do |options|
    @sample_apps.select{ |app|
      !options.key?(:flavors) || options[:flavors].include?(app.flavor)
    }.each do |app|
      test_sample_app_firebase({app: app, device_set: options[:device_set]})
    end
  end

  desc "Run instrumented tests for a sample app on Firebase"
  private_lane :test_sample_app_firebase do |options|
    if options[:app].ui_test_scheme.nil?
      UI.important("No UI test scheme found for #{options[:app].scheme}. Skipping instrumented tests.")
      next
    end

    sh(
      "gcloud firebase test ios run"\
        " --test #{@fl_output_dir}/#{options[:app].ui_test_scheme}-all.zip"\
        " --xcode-version 16.2"\
        " --device model=iphone8,version=15.7"\
        " --device model=iphone14pro,version=16.6"\
        " --device model=iphone15,version=18.0"\
        " --device model=ipad10,version=16.6"\
        " --results-bucket #{ENV['FIREBASE_TEST_RESULTS_BUCKET']}"\
        " --client-details=#{[
            "matrixLabel=\"#{ENV['FIREBASE_MATRIX_LABEL'] || "Manual Trigger"}\"",
            "app=\"#{options[:app].scheme}\"",
            "project=JudoKit-iOS"
          ].join(",")}"\
        " --timeout=30m"\
        " --num-flaky-test-attempts=1"\
        " --async"
    )
  end

  desc "Run instrumented tests for sample apps on BrowserStack"
  lane :test_sample_apps_browserstack do |options|
    @sample_apps.select{ |app|
      !options.key?(:flavors) || options[:flavors].include?(app.flavor)
    }.each do |app|
      test_sample_app_browserstack({app: app, device_set: options[:device_set]})
    end
  end

  desc "Run instrumented tests for a sample app on BrowserStack"
  private_lane :test_sample_app_browserstack do |options|
    if options[:app].ui_test_scheme.nil?
      UI.important("No UI test scheme found for #{options[:app].scheme}. Skipping instrumented tests.")
      next
    end

    upload_to_browserstack_app_automate(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      file_path: "#{@fl_output_dir}/#{options[:app].scheme}-production.ipa"
    )

    app_url = ENV["BROWSERSTACK_APP_ID"]

    test_suite_url = upload_xctestrun_to_browserstack(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      file_path: File.file?("#{fl_output_dir}/#{options[:app].ui_test_scheme}-smoke.zip") ? 
        "#{@fl_output_dir}/#{options[:app].ui_test_scheme}-smoke.zip" :
        "#{@fl_output_dir}/#{options[:app].ui_test_scheme}-all.zip"
    )

    run_xctestrun_on_browserstack(
      browserstack_username: ENV["BROWSERSTACK_USERNAME"],
      browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
      app_url: app_url,
      test_suite_url: test_suite_url,
      devices: ["iPhone 12-14"], # "iPhone 11-13", "iPhone XS-12", "iPhone 8-11", "iPhone 7-10"
      project: "JudoKit-iOS UI Tests",
      build_tag: "JudoKit-iOS"
    )
  end
  
  desc "Publish Sample Apps to Firebase"
  lane :publish_sample_apps do |options|
    @environments.each do |env|
      @sample_apps.select{ |app|
        !options.key?(:flavors) || options[:flavors].include?(app.flavor)
      }.each do |app|
        publish_sample_app({app: app, environment: env})
      end
    end
  end

  desc "Publish Sample App to Firebase"
  private_lane :publish_sample_app do |options|
    if options[:app].firebase_app_id(environment: options[:environment]).nil?
      UI.important("No Firebase App ID found for #{options[:app].scheme} and environment #{options[:environment]}. Won't publish.")
      next
    end
    firebase_app_distribution({
      groups: 'default-testers',
      ipa_path: "#{@fl_output_dir}/#{options[:app].scheme}-#{options[:environment]}.ipa",
      release_notes: changelog_from_git_commits(commits_count: 1),
      app: options[:app].firebase_app_id(environment: options[:environment]),
    })
  end
end
