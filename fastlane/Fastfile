default_platform(:ios)

platform :ios do

  before_all do
    setup_circle_ci
  end

  desc "Lint SDK"
  lane :lint do
    Dir.chdir('..') do
      sh('./scripts/judo_kit_lint.sh')
    end
  end

  desc "Build SDK"
  lane :build do
    carthage
    build_app(
      skip_codesigning: true,
      skip_package_ipa: true,
      skip_package_dependencies_resolution: true,
      scheme: 'JudoKit_iOS',
      project: './JudoKit_iOS.xcodeproj'
    )
  end

  desc "Run SDK tests"
  lane :test do
    carthage
    run_tests(ensure_devices_found: true)
  end

  # Example apps
  desc "Build Sample App"
  lane :build_sample_app do |options|
    flavor = options[:flavor]

    av = %w(obj-c swift carthage spm all)
    UI.user_error!("Unsupported flavor '#{flavor}', must be: #{av}") unless av.include?(flavor)

    if flavor == 'all'
      av.each do |flv|
        unless flv == 'all'
          options[:flavor] = flv
          build_sample options
        end
      end
    else
      build_sample options
    end
  end

  private_lane :build_sample do |options|
    flavor = options[:flavor]
    options.delete(:flavor)
    
    sync_code_signing_options = { type: "adhoc" }
    build_app_options = { export_method: "ad-hoc" }.merge(options)

    case flavor
      when 'obj-c'
        cocoapods(podfile: './Examples/ObjectiveCExampleApp/Podfile')
        
        sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoObjC'
        
        build_app_options[:scheme] = 'ObjectiveCExampleApp'
        build_app_options[:workspace] = './Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcworkspace'

      when 'swift'
        cocoapods(podfile: './Examples/SwiftExampleApp/Podfile')
        
        sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoSwift'

        build_app_options[:scheme] = 'SwiftExampleApp'
        build_app_options[:workspace] = './Examples/SwiftExampleApp/SwiftExampleApp.xcworkspace'

      when 'carthage'
        Dir.chdir('..') do
          sh('./scripts/carthage_example_carthage_bootstrap.sh')
        end

        sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoCarthage'

        build_app_options[:scheme] = 'CarthageExampleApp'
        build_app_options[:project] = './Examples/CarthageExampleApp/CarthageExampleApp.xcodeproj'

      when 'spm'
        sync_code_signing_options[:app_identifier] = 'com.judopay.SPMExampleApp'

        build_app_options[:scheme] = 'SPMExampleApp'
        build_app_options[:project] = './Examples/SPMExampleApp/SPMExampleApp.xcodeproj'

      else
        UI.user_error!("Unsupported flavor '#{flavor}'.")
      end
    
    sync_code_signing sync_code_signing_options
    build_app build_app_options
  end
  
  desc "Run full PR check pipeline"
  lane :pr_check do
    lint
    test
    build_sample_app(flavor: 'all')
  end

  desc "Build ObjectiveCExampleApp for instrumented tests"
  lane :build_instrumented_obj_c_sample_app do
    sync_code_signing_options = { type: "development" }
    run_tests_options = {
      build_for_testing: true, 
      workspace: "./Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcworkspace", 
      scheme: "ObjectiveCExampleAppUITests",
      destination: "generic/platform=iOS",
      sdk: "iphoneos",
      xcodebuild_command: "xcodebuild -allowProvisioningUpdates TEST_API_JUDO_ID=$JUDO_API_ID TEST_API_TOKEN=$JUDO_API_TOKEN TEST_API_SECRET=$JUDO_API_SECRET"
    }

    sync_code_signing sync_code_signing_options
    run_tests run_tests_options
  end

end