default_platform(:ios)

platform :ios do

  before_all do
    setup_circle_ci
  end

  desc "Lint SDK"
  lane :lint do
    Dir.chdir('..') do
      sh('./scripts/judo_kit_lint.sh')
    end
  end

  desc "Build SDK"
  lane :build do
    carthage
    build_app(
      skip_codesigning: true,
      skip_package_ipa: true,
      skip_package_dependencies_resolution: true,
      scheme: 'JudoKit_iOS',
      project: './JudoKit_iOS.xcodeproj'
    )
  end

  desc "Run SDK tests"
  lane :test do
    carthage
    run_tests(ensure_devices_found: true)
  end
  
  desc "Package ObjC example app and instrumented tests for uploading to firebase"
  lane :package_instrumented_tests do
    cocoapods(podfile: './Examples/ObjectiveCExampleApp/Podfile')

    sync_code_signing_options = {
      type: "development",
      app_identifier: ['com.judo.JudoPayDemoObjC', 'com.judo.JudoPayDemoObjC.ObjectiveCExampleAppUITests.*']
    }

    run_tests_options = {
      build_for_testing: true, 
      workspace: "./Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcworkspace", 
      scheme: "ObjectiveCExampleAppUITests",
      destination: "generic/platform=iOS",
      sdk: "iphoneos",
      xcodebuild_command: "env NSUnbufferedIO=YES xcodebuild -allowProvisioningUpdates TEST_API_JUDO_ID=$JUDO_API_ID TEST_API_TOKEN=$JUDO_API_TOKEN TEST_API_SECRET=$JUDO_API_SECRET",
      include_simulator_logs: false
    }

    app_store_connect_api_key
    sync_code_signing sync_code_signing_options
    run_tests run_tests_options

    Dir.chdir('..') do
      FileUtils.mkdir_p(ENV['FL_OUTPUT_DIR'])
      Dir.chdir("#{ENV['DERIVED_DATA_PATH']}/Build/Products") do
        sh("zip -r ../../../#{ENV['FL_OUTPUT_DIR']}/ObjectiveCExampleAppUITests.zip Debug-iphoneos ObjectiveCExampleAppUITests_*.xctestrun")
      end
    end
  end

  def extract_flavor_list(options)
    supported_flavors = %w(obj-c swift carthage spm)

    if options[:flavors].nil?
      UI.important("No flavors option has been provided, defaulting to: #{supported_flavors}")
    end

    current_flavors = options[:flavors]&.split(',')&.map(&:strip) || supported_flavors

    current_flavors.each do |flavor|
      UI.user_error!("Unsupported flavor '#{flavor}', must be: #{supported_flavors}") unless supported_flavors.include?(flavor)
    end

    return current_flavors
  end

  desc "Build Sample App"
  lane :build_sample_app do | options |
    
    extract_flavor_list(options).each do | flavor |

      build_for_distribution = options[:build_for_distribution].nil? ? true : options[:build_for_distribution]

      sync_code_signing_options = { type: 'adhoc' }
      build_app_options = { export_method: 'ad-hoc' }

      if !build_for_distribution  
        build_app_options[:skip_codesigning] = true
        build_app_options[:skip_package_ipa] = true
        build_app_options[:skip_archive] = true
        build_app_options[:configuration] = 'Debug'
      end

      case flavor
        when 'obj-c'
          cocoapods(podfile: './Examples/ObjectiveCExampleApp/Podfile')
          
          sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoObjC'
          
          build_app_options[:scheme] = 'ObjectiveCExampleApp'
          build_app_options[:output_name] = 'ObjectiveCExampleApp.ipa'
          build_app_options[:workspace] = './Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcworkspace'
  
        when 'swift'
          cocoapods(podfile: './Examples/SwiftExampleApp/Podfile')
          
          sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoSwift'
  
          build_app_options[:scheme] = 'SwiftExampleApp'
          build_app_options[:output_name] = 'SwiftExampleApp.ipa'
          build_app_options[:workspace] = './Examples/SwiftExampleApp/SwiftExampleApp.xcworkspace'
  
        when 'carthage'
          Dir.chdir('..') do
            sh('./scripts/carthage_example_carthage_bootstrap.sh')
          end
  
          sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoCarthage'
  
          build_app_options[:scheme] = 'CarthageExampleApp'
          build_app_options[:output_name] = 'CarthageExampleApp.ipa'
          build_app_options[:project] = './Examples/CarthageExampleApp/CarthageExampleApp.xcodeproj'
  
        when 'spm'
          sync_code_signing_options[:app_identifier] = 'com.judopay.SPMExampleApp'
  
          build_app_options[:scheme] = 'SPMExampleApp'
          build_app_options[:output_name] = 'SPMExampleApp.ipa'
          build_app_options[:project] = './Examples/SPMExampleApp/SPMExampleApp.xcodeproj'
  
        else
          UI.user_error!("Unsupported flavor '#{flavor}'.")
        end
      
      if build_for_distribution
        app_store_connect_api_key
        sync_code_signing sync_code_signing_options
      end

      build_app build_app_options
      end
  end
  
  desc "Distribute ObjectiveCExampleApp"
  lane :distribute_sample_app do |options|
    
    increment_build_number_options = {}
    
    firebase_app_distribution_options = {
      groups: 'default-testers',
      release_notes: changelog_from_git_commits(commits_count: 1)
    }

    extract_flavor_list(options).each do | flavor |  
      case flavor
        when 'obj-c'
          firebase_app_distribution_options[:app] = ENV['IOS_OBJ_C_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj'
        when 'swift'
          firebase_app_distribution_options[:app] = ENV['IOS_SWIFT_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/SwiftExampleApp/SwiftExampleApp.xcodeproj'
        when 'carthage'
          firebase_app_distribution_options[:app] = ENV['IOS_CARTHAGE_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/CarthageExampleApp/CarthageExampleApp.xcodeproj'
        when 'spm'
          firebase_app_distribution_options[:app] = ENV['IOS_SPM_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/SPMExampleApp/SPMExampleApp.xcodeproj'
        else
          UI.user_error!("Unsupported flavor '#{flavor}'.")
        end
      
      latest_release = firebase_app_distribution_get_latest_release app:firebase_app_distribution_options[:app]
      current_version = latest_release.nil? ? 0 : latest_release[:buildVersion].to_i
      increment_build_number_options[:build_number] = current_version + 1
      increment_build_number increment_build_number_options

      build_sample_app flavors: flavor
      firebase_app_distribution firebase_app_distribution_options
      end
  end

  desc "Run full PR check pipeline"
  lane :pr_check do
    lint
    test
    build_sample_app flavors:'obj-c, swift, carthage, spm'
  end

end