default_platform(:ios)

# Check if an environment variable exists and is not empty
def env_var_valid?(var_name)
  return ENV.has_key?(var_name) && !ENV[var_name].to_s.empty?
end

def replace(file_path, old_string, new_string)
  # Check if the file exists
  unless File.exist?(file_path)
    UI.user_error!("File not found: #{file_path}")
  end

  # Read the file content
  file_content = File.read(file_path)

  # Replace the string
  new_content = file_content.gsub(old_string, new_string)

  # Write the updated content back to the file
  File.open(file_path, "w") { |file| file.puts new_content }

  UI.success("Replaced '#{old_string}' with '#{new_string}' in #{file_path}")
end

platform :ios do

  before_all do
    setup_circle_ci
  end

  desc "Lint SDK"
  lane :lint do
    Dir.chdir('..') do
      sh('./scripts/judo_kit_lint.sh')
    end
  end

  desc "Build SDK"
  lane :build do
    carthage
    build_app(
      skip_codesigning: true,
      skip_package_ipa: true,
      skip_package_dependencies_resolution: true,
      scheme: 'JudoKit_iOS',
      project: './JudoKit_iOS.xcodeproj'
    )
  end

  desc "Run SDK tests"
  lane :test do
    carthage
    run_tests(ensure_devices_found: true)
  end

  desc "Package ObjC example app and instrumented tests for uploading to firebase"
  lane :package_instrumented_tests do
    cocoapods(podfile: './Examples/ObjectiveCExampleApp/Podfile')

    sync_code_signing_options = {
      type: "development",
      app_identifier: ['com.judo.JudoPayDemoObjC', 'com.judo.JudoPayDemoObjC.ObjectiveCExampleAppUITests.*']
    }

    run_tests_options = {
      build_for_testing: true,
      workspace: "./Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcworkspace",
      scheme: "ObjectiveCExampleAppUITests",
      destination: "generic/platform=iOS",
      sdk: "iphoneos",
      xcodebuild_command: "env NSUnbufferedIO=YES xcodebuild -allowProvisioningUpdates TEST_API_JUDO_ID=$JUDO_API_ID TEST_API_TOKEN=$JUDO_API_TOKEN TEST_API_SECRET=$JUDO_API_SECRET RSA_PUBLIC_KEY=$RSA_PUBLIC_KEY RAVELIN_MOCK_SERVER_URL=$RAVELIN_MOCK_SERVER_URL",
      include_simulator_logs: false,
      clean: true
    }

    app_store_connect_api_key
    sync_code_signing sync_code_signing_options
    run_tests run_tests_options

    Dir.chdir('..') do
      FileUtils.mkdir_p(ENV['FL_OUTPUT_DIR'])

      runner_app_path = Dir["#{ENV['DERIVED_DATA_PATH']}/Build/Products/Debug-iphoneos/*-Runner.app"].first
      xctestrun_path = Dir["#{ENV['DERIVED_DATA_PATH']}/Build/Products/*.xctestrun"].first

      if runner_app_path.nil?
        UI.user_error!("Runner.app not found in Debug-iphoneos/")
      end

      if xctestrun_path.nil?
        UI.user_error!(".xctestrun file not found in Build/Products/")
      end

      test_suite_dir = File.join(ENV['FL_OUTPUT_DIR'], 'BrowserStackTestSuite')
      FileUtils.rm_rf(test_suite_dir)
      FileUtils.mkdir_p(test_suite_dir)

      FileUtils.cp_r(runner_app_path, test_suite_dir)

      test_bundle = File.join(runner_app_path, "PlugIns", "ObjectiveCExampleAppUITests.xctest")
      if File.exist?(test_bundle)
        FileUtils.mkdir_p(File.join(test_suite_dir, "ObjectiveCExampleAppUITests-Runner.app", "PlugIns"))
        FileUtils.cp_r(test_bundle, File.join(test_suite_dir, "ObjectiveCExampleAppUITests-Runner.app", "PlugIns"))
      else
        UI.user_error!("Test bundle not found at expected location: #{test_bundle}")
      end
      FileUtils.cp(xctestrun_path, test_suite_dir)

      require 'rexml/document'

      patched_xctestrun_path = File.join(test_suite_dir, File.basename(xctestrun_path))

      xml = File.read(patched_xctestrun_path)
      doc = REXML::Document.new(xml)

      keys = []
      doc.elements.each('plist/dict/key') do |key|
        keys << key.text
      end

      UI.user_error!("Could not find any test target keys in .xctestrun") if keys.empty?
      test_target_key = keys.first
      puts("ðŸ”§ Detected test target key: #{test_target_key}")

      verify_cmd = "/usr/libexec/PlistBuddy -c \"Print :#{test_target_key}\" \"#{patched_xctestrun_path}\""
      verify_output = `#{verify_cmd}`

      unless verify_output.include?("{")
        UI.user_error!("ERROR: #{test_target_key} is not a dictionary in .xctestrun. It may have been corrupted by a previous patch.")
      end

      patch_values = {
        "TestBundlePath" => "ObjectiveCExampleAppUITests-Runner.app/PlugIns/ObjectiveCExampleAppUITests.xctest",
        "TestHostPath" => "ObjectiveCExampleAppUITests-Runner.app/ObjectiveCExampleApp"
      }

      patch_values.each do |key, value|
        check_cmd = "/usr/libexec/PlistBuddy -c \"Print :#{test_target_key}.#{key}\" \"#{patched_xctestrun_path}\""
        key_exists = system(check_cmd)

        action = key_exists ? "Set" : "Add"
        type = "string"
        puts("#{action}ting #{key} for #{test_target_key}")

        patch_cmd = "/usr/libexec/PlistBuddy -c \"#{action} :#{test_target_key}.#{key} #{type} #{value}\" \"#{patched_xctestrun_path}\""
        sh(patch_cmd)
      end

      puts("Successfully patched .xctestrun.")

      Dir.chdir(test_suite_dir) do
        sh("zip --symlinks -r ../ObjectiveCExampleAppUITests.zip *")
      end

      FileUtils.rm_rf(test_suite_dir)
    end
  end

  desc "Package Swift example app and instrumented tests for uploading to Firebase"
  lane :package_instrumented_tests_swift do
    cocoapods(podfile: './Examples/SwiftExampleApp/Podfile')

    sync_code_signing_options = {
      type: "development",
      app_identifier: ['com.judo.JudoPayDemoSwift', 'com.judo.JudoPayDemoSwift.SwiftExampleAppUITests.*'],
    }

    run_tests_options = {
      build_for_testing: true,
      workspace: "./Examples/SwiftExampleApp/SwiftExampleApp.xcworkspace",
      testplan: "SwiftExampleAppTestPlan",
      scheme: "SwiftExampleAppUITests",
      destination: "generic/platform=iOS",
      sdk: "iphoneos",
      xcodebuild_command: "env NSUnbufferedIO=YES xcodebuild -allowProvisioningUpdates TEST_API_JUDO_ID=$JUDO_API_ID TEST_API_TOKEN=$JUDO_API_TOKEN TEST_API_SECRET=$JUDO_API_SECRET",
      include_simulator_logs: false
    }

    app_store_connect_api_key
    sync_code_signing sync_code_signing_options
    run_tests run_tests_options

    Dir.chdir('..') do
      FileUtils.mkdir_p(ENV['FL_OUTPUT_DIR'])
      Dir.chdir("#{ENV['DERIVED_DATA_PATH']}/Build/Products") do
        sh("zip -r ../../../#{ENV['FL_OUTPUT_DIR']}/SwiftExampleAppUITests.zip Debug-iphoneos SwiftExampleAppUITests_*.xctestrun")
      end
    end
  end

  def extract_flavor_list(options)
    supported_flavors = %w(obj-c obj-c-stg swift carthage spm)

    if options[:flavors].nil?
      UI.important("No flavors option has been provided, defaulting to: #{supported_flavors}")
    end

    current_flavors = options[:flavors]&.split(',')&.map(&:strip) || supported_flavors

    current_flavors.each do |flavor|
      UI.user_error!("Unsupported flavor '#{flavor}', must be: #{supported_flavors}") unless supported_flavors.include?(flavor)
    end

    return current_flavors
  end

  desc "Build Sample App"
  lane :build_sample_apps do | options |

    extract_flavor_list(options).each do | flavor |

      build_for_distribution = options[:build_for_distribution].nil? ? true : options[:build_for_distribution]

      build_for_browserstack = options[:build_for_browserstack].nil? ? false : options[:build_for_browserstack]

      sync_code_signing_options = { type: 'adhoc' }
      build_app_options = { export_method: 'ad-hoc' }

      if build_for_browserstack
        sync_code_signing_options[:type] = 'development'
        build_app_options[:export_method] = 'development'
        build_app_options[:skip_codesigning] = false
        build_app_options[:skip_package_ipa] = false
        build_app_options[:skip_archive] = false
        build_app_options[:configuration] = 'Debug'

      elsif !build_for_distribution
        build_app_options[:skip_codesigning] = true
        build_app_options[:skip_package_ipa] = true
        build_app_options[:skip_archive] = true
        build_app_options[:configuration] = 'Debug'
      end

      case flavor
        when 'obj-c', 'obj-c-stg'
          cocoapods(podfile: './Examples/ObjectiveCExampleApp/Podfile')

          sync_code_signing_options[:app_identifier] = "com.judo.JudoPayDemoObjC#{flavor == 'obj-c-stg' ? '.staging' : ''}"

          build_app_options[:scheme] = 'ObjectiveCExampleApp'
          build_app_options[:output_name] = 'ObjectiveCExampleApp.ipa'
          build_app_options[:workspace] = './Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcworkspace'

        when 'swift'
          cocoapods(podfile: './Examples/SwiftExampleApp/Podfile')

          sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoSwift'

          build_app_options[:scheme] = 'SwiftExampleApp'
          build_app_options[:output_name] = 'SwiftExampleApp.ipa'
          build_app_options[:workspace] = './Examples/SwiftExampleApp/SwiftExampleApp.xcworkspace'

        when 'carthage'
          Dir.chdir('..') do
            sh('./scripts/carthage_example_carthage_bootstrap.sh')
          end

          sync_code_signing_options[:app_identifier] = 'com.judo.JudoPayDemoCarthage'

          build_app_options[:scheme] = 'CarthageExampleApp'
          build_app_options[:output_name] = 'CarthageExampleApp.ipa'
          build_app_options[:project] = './Examples/CarthageExampleApp/CarthageExampleApp.xcodeproj'

        when 'spm'
          sync_code_signing_options[:app_identifier] = 'com.judopay.SPMExampleApp'

          build_app_options[:scheme] = 'SPMExampleApp'
          build_app_options[:output_name] = 'SPMExampleApp.ipa'
          build_app_options[:project] = './Examples/SPMExampleApp/SPMExampleApp.xcodeproj'

        else
          UI.user_error!("Unsupported flavor '#{flavor}'.")
        end

        build_sample_app_helper_options = {
          flavor: flavor,
          build_for_distribution: build_for_distribution,
          build_app_options: build_app_options,
          sync_code_signing_options: sync_code_signing_options,
          build_for_browserstack: build_for_browserstack
        }

        build_sample_app_helper build_sample_app_helper_options
      end
  end

  private_lane :build_sample_app_helper do |options|
    UI.user_error!("build_for_distribution option is required.") unless options.key?(:build_for_distribution)
    UI.user_error!("build_app_options option is required.") unless options[:build_app_options]
    UI.user_error!("sync_code_signing_options option is required.") unless options[:sync_code_signing_options]

    inject_staging_environment if options[:flavor] == 'obj-c-stg'

    if options[:build_for_distribution] || options[:build_for_browserstack]
      app_store_connect_api_key
      sync_code_signing options[:sync_code_signing_options]
    end

    build_app options[:build_app_options]

    after_all do
      revert_staging_environment if options[:flavor] == 'obj-c-stg'
    end

  end

  desc "Distribute ObjectiveCExampleApp"
  lane :distribute_sample_app do |options|

    increment_build_number_options = {}

    firebase_app_distribution_options = {
      groups: 'default-testers',
      release_notes: changelog_from_git_commits(commits_count: 1)
    }

    extract_flavor_list(options).each do | flavor |
      case flavor
      when 'obj-c', 'obj-c-stg'
          firebase_app_distribution_options[:app] = ENV[flavor == 'obj-c' ? 'IOS_OBJ_C_FIREBASE_APP_ID' : 'IOS_OBJ_C_STG_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj'
        when 'swift'
          firebase_app_distribution_options[:app] = ENV['IOS_SWIFT_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/SwiftExampleApp/SwiftExampleApp.xcodeproj'
        when 'carthage'
          firebase_app_distribution_options[:app] = ENV['IOS_CARTHAGE_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/CarthageExampleApp/CarthageExampleApp.xcodeproj'
        when 'spm'
          firebase_app_distribution_options[:app] = ENV['IOS_SPM_FIREBASE_APP_ID']
          increment_build_number_options[:xcodeproj] = './Examples/SPMExampleApp/SPMExampleApp.xcodeproj'
        else
          UI.user_error!("Unsupported flavor '#{flavor}'.")
        end

      latest_release = firebase_app_distribution_get_latest_release app:firebase_app_distribution_options[:app]
      current_version = latest_release.nil? ? 0 : latest_release[:buildVersion].to_i
      increment_build_number_options[:build_number] = current_version + 1
      increment_build_number increment_build_number_options

      build_sample_apps flavors: flavor
      firebase_app_distribution firebase_app_distribution_options
      end
  end

  desc "Run full PR check pipeline"
  lane :pr_check do
    lint
    test
    build_sample_apps flavors:'obj-c, swift, carthage, spm'
  end

  desc "Injects the staging env variables"
  lane :inject_staging_environment do |options|
      unless env_var_valid?('STAGING_HOST_NAME')
          UI.abort_with_message!("STAGING_HOST_NAME environment variable is not set. Unable to continue.")
      end

      suffix = options[:suffix] || ".staging"

      Dir.chdir('..') do
        current_bundle_id = get_product_bundle_id(
          project_filepath: "#{Dir.pwd}/Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj",
          scheme: "ObjectiveCExampleApp"
        )

        if current_bundle_id.end_with?(suffix)
          UI.message("The current bundle id already has the suffix '#{suffix}'")
        else
          new_bundle_id = "#{current_bundle_id}#{suffix}"

          update_app_identifier(
            xcodeproj: "#{Dir.pwd}/Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj",
            plist_path: "#{Dir.pwd}/Examples/ObjectiveCExampleApp/ObjectiveCExampleApp/Info.plist",
            app_identifier: new_bundle_id
          )

          UI.message("Updated bundle ID to: #{new_bundle_id}")

          profile_specifier = "match AdHoc com.judo.JudoPayDemoObjC"
          replace("#{Dir.pwd}/Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj/project.pbxproj", profile_specifier, "#{profile_specifier}#{suffix}")
        end

        replace("#{Dir.pwd}/Source/Models/Constants/JPConstants.h", ".judopay.com", ".#{ENV['STAGING_HOST_NAME']}")
      end
  end

  desc "Revert injected staging env variables"
  lane :revert_staging_environment do |options|
    files_list = options[:files] || []
    files_list.append("Source/Models/Constants/JPConstants.h")
    files_list.append("Examples/ObjectiveCExampleApp/ObjectiveCExampleApp.xcodeproj/project.pbxproj")

    reset_git_repo(
      force: true,
      files: files_list
    )
  end

end
